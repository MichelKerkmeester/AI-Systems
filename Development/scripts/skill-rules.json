{
  "skills": {
    "animation-strategy": {
      "type": "knowledge",
      "enforcement": "suggest",
      "priority": "high",
      "description": "Animation implementation with Motion.dev (knowledge/animation_strategy.md)",
      "promptTriggers": {
        "keywords": [
          "animation",
          "motion",
          "motion.dev",
          "animate",
          "transition",
          "sequence",
          "timeline",
          "css animation"
        ],
        "intentPatterns": [
          "(add|create|implement).*?(animation|motion|transition)",
          "(animate|move|fade|slide).*?(element|component)",
          "(sequence|timeline|orchestrate).*?(animation|motion)",
          "(css|motion).*?(animation)"
        ]
      },
      "fileTriggers": {
        "pathPatterns": ["src/**/*.js", "knowledge/animation_strategy.md"],
        "contentPatterns": [
          "Motion\\.",
          "animate\\(",
          "timeline\\(",
          "from 'motion'",
          "import.*?motion"
        ]
      }
    },
    "chrome-devtools": {
      "type": "tool",
      "enforcement": "suggest",
      "priority": "high",
      "description": "Browser automation, debugging, performance analysis",
      "promptTriggers": {
        "keywords": [
          "browser",
          "screenshot",
          "puppeteer",
          "automation",
          "performance",
          "network traffic",
          "web scraping",
          "debugging",
          "chrome",
          "devtools"
        ],
        "intentPatterns": [
          "(take|capture|get).*?(screenshot|image|visual)",
          "(test|check|verify).*?(browser|page|site)",
          "(automate|script).*?(browser|web|form)",
          "(measure|analyze|check).*?(performance|speed|load)",
          "(monitor|track|capture).*?(network|requests|traffic)"
        ]
      },
      "fileTriggers": {
        "pathPatterns": [".claude/skills/chrome-devtools/**"],
        "contentPatterns": ["puppeteer", "browser\\.", "page\\."]
      }
    },
    "code-standards": {
      "type": "knowledge",
      "enforcement": "strict",
      "priority": "critical",
      "description": "Naming conventions, file headers, commenting rules (knowledge/code_standards.md)",
      "promptTriggers": {
        "keywords": [
          "naming",
          "convention",
          "standard",
          "format",
          "style",
          "header",
          "comment",
          "snake_case",
          "kebab-case",
          "PascalCase"
        ],
        "intentPatterns": [
          "(create|add|write).*?(file|component|function|class)",
          "(name|call).*?(variable|function|class)",
          "(add|write).*?(comment|documentation|header)",
          "(what|how).*?(naming|convention|standard)"
        ]
      },
      "fileTriggers": {
        "pathPatterns": ["src/**/*.js", "src/**/*.css", "knowledge/code_standards.md"],
        "contentPatterns": []
      },
      "alwaysActive": true
    },
    "debugging": {
      "type": "knowledge",
      "enforcement": "suggest",
      "priority": "medium",
      "description": "Debugging strategies and troubleshooting (knowledge/debugging.md)",
      "promptTriggers": {
        "keywords": [
          "debug",
          "debugging",
          "troubleshoot",
          "error",
          "bug",
          "console",
          "console.log",
          "breakpoint"
        ],
        "intentPatterns": [
          "(debug|troubleshoot|fix).*?(error|bug|issue|problem)",
          "(why|what|how).*?(not working|broken|failing)",
          "(console|log|trace).*?(error|output)"
        ]
      },
      "fileTriggers": {
        "pathPatterns": ["knowledge/debugging.md"],
        "contentPatterns": ["console\\.log", "debugger", "try.*catch"]
      }
    },
    "document-style-guide": {
      "type": "knowledge",
      "enforcement": "suggest",
      "priority": "medium",
      "description": "Documentation and markdown formatting standards (knowledge/document_style_guide.md)",
      "promptTriggers": {
        "keywords": [
          "documentation",
          "markdown",
          "readme",
          "docs",
          "document",
          "formatting",
          "style guide"
        ],
        "intentPatterns": [
          "(create|write|update).*?(documentation|readme|docs|markdown)",
          "(format|structure).*?(document|markdown)",
          "(how to|what).*?(document|write docs)"
        ]
      },
      "fileTriggers": {
        "pathPatterns": ["**/*.md", "knowledge/document_style_guide.md"],
        "contentPatterns": []
      }
    },
    "git-worktrees": {
      "type": "workflow",
      "enforcement": "suggest",
      "priority": "high",
      "description": "Isolated workspace management with temporary branches",
      "promptTriggers": {
        "keywords": [
          "worktree",
          "workspace",
          "isolation",
          "hotfix",
          "urgent fix",
          "parallel work",
          "context switch",
          "branch isolation"
        ],
        "intentPatterns": [
          "(create|add|setup|make).*?(worktree|workspace|isolated)",
          "(urgent|hotfix|emergency).*?(fix|patch|change)",
          "(work on|switch to|handle).*?(multiple|parallel|different)",
          "(review|test).*?(locally|isolation|separate)"
        ]
      },
      "fileTriggers": {
        "pathPatterns": [".worktrees/**"],
        "contentPatterns": []
      }
    },
    "initialization-pattern": {
      "type": "knowledge",
      "enforcement": "strict",
      "priority": "critical",
      "description": "CDN-safe initialization pattern (knowledge/initialization_pattern.md)",
      "promptTriggers": {
        "keywords": [
          "initialization",
          "init",
          "setup",
          "bootstrap",
          "start component",
          "double init",
          "INIT_FLAG",
          "DOMContentLoaded"
        ],
        "intentPatterns": [
          "(create|add|new).*?(component|module|script)",
          "(initialize|init|setup).*?(component|script)",
          "(prevent|fix).*?(double|multiple).*?(init|initialization)"
        ]
      },
      "fileTriggers": {
        "pathPatterns": ["src/**/*.js", "src_cdn_versions/**/*.js", "knowledge/initialization_pattern.md"],
        "contentPatterns": [
          "INIT_FLAG",
          "function init_",
          "const start =",
          "DOMContentLoaded"
        ]
      }
    },
    "webflow-platform-constraints": {
      "type": "knowledge",
      "enforcement": "suggest",
      "priority": "high",
      "description": "Webflow platform constraints and CDN-safe patterns (knowledge/webflow_platform_constraints.md)",
      "promptTriggers": {
        "keywords": [
          "webflow",
          "cdn",
          "script loading",
          "cdn-safe",
          "webflow.push",
          "platform constraint"
        ],
        "intentPatterns": [
          "(fix|prevent|handle).*?(double|multiple).*?(init|initialization)",
          "(webflow|cdn).*?(safe|pattern|constraint)",
          "(script|component).*?(loading|initialization|setup)"
        ]
      },
      "fileTriggers": {
        "pathPatterns": ["src/**/*.js", "src_cdn_versions/**/*.js", "knowledge/webflow_platform_constraints.md"],
        "contentPatterns": [
          "Webflow\\.push",
          "__.*CdnInit"
        ]
      }
    },
    "workflow-spec-kit": {
      "type": "workflow",
      "enforcement": "suggest",
      "priority": "high",
      "description": "Complete 15-step SpecKit workflow with parallel sub-agents and approval gates",
      "promptTriggers": {
        "keywords": [
          "complete workflow",
          "full workflow",
          "end-to-end",
          "speckit",
          "orchestration",
          "spec to implementation",
          "parallel workflow",
          "spec plan implement"
        ],
        "intentPatterns": [
          "(run|execute|start).*?(complete|full|entire).*?(workflow|speckit)",
          "(spec|specification).*?(to|through).*?(implementation|code)",
          "speckit.*?(complete|workflow|orchestration)",
          "(plan|implement|build).*?(feature|component).*?(spec|workflow)"
        ]
      },
      "fileTriggers": {
        "pathPatterns": ["specs/**/", "specs/**/spec.md", "specs/**/plan.md", "specs/**/implementation_plan.md"],
        "contentPatterns": []
      }
    }
  },
  "riskPatterns": {
    "animation": {
      "patterns": [
        "Motion\\.",
        "animate\\(",
        "timeline\\(",
        "gsap",
        "transition"
      ],
      "reminder": "✅ ANIMATION CHECK:\n- CSS used for simple interactions?\n- Motion.dev for complex sequences?\n- Performance optimized (transform/opacity)?\n- Mobile timing adjusted?"
    },
    "asyncOperations": {
      "patterns": [
        "async ",
        "await ",
        "fetch\\(",
        "\\.then\\(",
        "Promise"
      ],
      "reminder": "✅ ASYNC CHECK:\n- Error handling with try-catch?\n- Loading states managed?\n- Timeout handling present?\n- Network failure scenarios covered?"
    },
    "formHandling": {
      "patterns": [
        "form\\.",
        "submit",
        "validation",
        "preventDefault"
      ],
      "reminder": "✅ FORM CHECK:\n- Validation implemented?\n- Error handling present?\n- Success/failure states handled?\n- Accessibility attributes added?"
    },
    "initialization": {
      "patterns": [
        "INIT_FLAG",
        "window\\[INIT_FLAG\\]",
        "DOMContentLoaded",
        "document\\.readyState"
      ],
      "reminder": "✅ INITIALIZATION CHECK:\n- Using CDN-safe pattern with unique INIT_FLAG?\n- Guard against double initialization?\n- Proper delay (INIT_DELAY_MS) configured?\n- Webflow.push integration present?"
    }
  }
}
